
TDB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb4  08002eb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002eb4  08002eb4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eb4  08002eb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08002ec8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08002ec8  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8db  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c35  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  0002e548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001455f  00000000  00000000  0002faf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008203  00000000  00000000  0004404f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071b95  00000000  00000000  0004c252  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdde7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e50  00000000  00000000  000bde64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e78 	.word	0x08002e78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002e78 	.word	0x08002e78

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd8c 	bl	8000c6c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f834 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa20 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9e4 	bl	8000528 <MX_DMA_Init>
  MX_CAN_Init();
 8000160:	f000 f86a 	bl	8000238 <MX_CAN_Init>
  MX_TIM1_Init();
 8000164:	f000 f89c 	bl	80002a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000168:	f000 f8ec 	bl	8000344 <MX_TIM2_Init>
  MX_TIM3_Init();
 800016c:	f000 f964 	bl	8000438 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  led_idle_DutyCycle(250); // duty cycle register
 8000170:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <main+0x64>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	22fa      	movs	r2, #250	; 0xfa
 8000176:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4 ); // PWM Led Idle
 8000178:	210c      	movs	r1, #12
 800017a:	480d      	ldr	r0, [pc, #52]	; (80001b0 <main+0x64>)
 800017c:	f002 f87a 	bl	8002274 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(control_wiper_power_GPIO_Port, control_wiper_power_Pin,1);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000186:	480b      	ldr	r0, [pc, #44]	; (80001b4 <main+0x68>)
 8000188:	f001 fbcd 	bl	8001926 <HAL_GPIO_WritePin>
  htim2.Instance->CCR1=8000; //
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <main+0x6c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000194:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1); //PWM Servo Moteur | WIPER
 8000196:	2100      	movs	r1, #0
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <main+0x6c>)
 800019a:	f002 f86b 	bl	8002274 <HAL_TIM_PWM_Start>
  SetWiperPourcentage(wiper_starting_DutyCycle_pourcentage);
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <main+0x6c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	22c8      	movs	r2, #200	; 0xc8
 80001a4:	635a      	str	r2, [r3, #52]	; 0x34

  /*************************************IIIIIIIII C IIIIIIIIIII*********************************************/
  ////////////////////////////////////////////////////////////////////////////////
  HAL_TIM_Base_Start_IT(&htim1); //<------------------------------------------- C'est laaaaaaaaaaaaaaaaaaa
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <main+0x70>)
 80001a8:	f002 f80d 	bl	80021c6 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ac:	e7fe      	b.n	80001ac <main+0x60>
 80001ae:	bf00      	nop
 80001b0:	20000054 	.word	0x20000054
 80001b4:	40010c00 	.word	0x40010c00
 80001b8:	20000118 	.word	0x20000118
 80001bc:	20000094 	.word	0x20000094

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	; 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 fe4a 	bl	8002e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e6:	2301      	movs	r3, #1
 80001e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ea:	2310      	movs	r3, #16
 80001ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ee:	2300      	movs	r3, #0
 80001f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fbd0 	bl	800199c <HAL_RCC_OscConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000202:	f000 fa6d 	bl	80006e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000206:	230f      	movs	r3, #15
 8000208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800020a:	2300      	movs	r3, #0
 800020c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fe3c 	bl	8001e9c <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800022a:	f000 fa59 	bl	80006e0 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	; 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <MX_CAN_Init+0x60>)
 800023e:	4a17      	ldr	r2, [pc, #92]	; (800029c <MX_CAN_Init+0x64>)
 8000240:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <MX_CAN_Init+0x60>)
 8000244:	2210      	movs	r2, #16
 8000246:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000248:	4b13      	ldr	r3, [pc, #76]	; (8000298 <MX_CAN_Init+0x60>)
 800024a:	2200      	movs	r2, #0
 800024c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <MX_CAN_Init+0x60>)
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <MX_CAN_Init+0x60>)
 8000256:	2200      	movs	r2, #0
 8000258:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_CAN_Init+0x60>)
 800025c:	2200      	movs	r2, #0
 800025e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <MX_CAN_Init+0x60>)
 8000262:	2200      	movs	r2, #0
 8000264:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <MX_CAN_Init+0x60>)
 8000268:	2200      	movs	r2, #0
 800026a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <MX_CAN_Init+0x60>)
 800026e:	2200      	movs	r2, #0
 8000270:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <MX_CAN_Init+0x60>)
 8000274:	2200      	movs	r2, #0
 8000276:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <MX_CAN_Init+0x60>)
 800027a:	2200      	movs	r2, #0
 800027c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <MX_CAN_Init+0x60>)
 8000280:	2200      	movs	r2, #0
 8000282:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000284:	4804      	ldr	r0, [pc, #16]	; (8000298 <MX_CAN_Init+0x60>)
 8000286:	f000 fd53 	bl	8000d30 <HAL_CAN_Init>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000290:	f000 fa26 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000002c 	.word	0x2000002c
 800029c:	40006400 	.word	0x40006400

080002a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b4:	463b      	mov	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <MX_TIM1_Init+0x9c>)
 80002be:	4a20      	ldr	r2, [pc, #128]	; (8000340 <MX_TIM1_Init+0xa0>)
 80002c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <MX_TIM1_Init+0x9c>)
 80002c4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ca:	4b1c      	ldr	r3, [pc, #112]	; (800033c <MX_TIM1_Init+0x9c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80002d0:	4b1a      	ldr	r3, [pc, #104]	; (800033c <MX_TIM1_Init+0x9c>)
 80002d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_TIM1_Init+0x9c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <MX_TIM1_Init+0x9c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_TIM1_Init+0x9c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002ea:	4814      	ldr	r0, [pc, #80]	; (800033c <MX_TIM1_Init+0x9c>)
 80002ec:	f001 ff40 	bl	8002170 <HAL_TIM_Base_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80002f6:	f000 f9f3 	bl	80006e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000300:	f107 0308 	add.w	r3, r7, #8
 8000304:	4619      	mov	r1, r3
 8000306:	480d      	ldr	r0, [pc, #52]	; (800033c <MX_TIM1_Init+0x9c>)
 8000308:	f002 f9b4 	bl	8002674 <HAL_TIM_ConfigClockSource>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000312:	f000 f9e5 	bl	80006e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800031e:	463b      	mov	r3, r7
 8000320:	4619      	mov	r1, r3
 8000322:	4806      	ldr	r0, [pc, #24]	; (800033c <MX_TIM1_Init+0x9c>)
 8000324:	f002 fd26 	bl	8002d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800032e:	f000 f9d7 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000094 	.word	0x20000094
 8000340:	40012c00 	.word	0x40012c00

08000344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08e      	sub	sp, #56	; 0x38
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	f107 0320 	add.w	r3, r7, #32
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
 8000370:	615a      	str	r2, [r3, #20]
 8000372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000374:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <MX_TIM2_Init+0xf0>)
 8000376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20-1;
 800037c:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <MX_TIM2_Init+0xf0>)
 800037e:	2213      	movs	r2, #19
 8000380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <MX_TIM2_Init+0xf0>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000-1;
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <MX_TIM2_Init+0xf0>)
 800038a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800038e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000390:	4b28      	ldr	r3, [pc, #160]	; (8000434 <MX_TIM2_Init+0xf0>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000396:	4b27      	ldr	r3, [pc, #156]	; (8000434 <MX_TIM2_Init+0xf0>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039c:	4825      	ldr	r0, [pc, #148]	; (8000434 <MX_TIM2_Init+0xf0>)
 800039e:	f001 fee7 	bl	8002170 <HAL_TIM_Base_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003a8:	f000 f99a 	bl	80006e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b6:	4619      	mov	r1, r3
 80003b8:	481e      	ldr	r0, [pc, #120]	; (8000434 <MX_TIM2_Init+0xf0>)
 80003ba:	f002 f95b 	bl	8002674 <HAL_TIM_ConfigClockSource>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003c4:	f000 f98c 	bl	80006e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003c8:	481a      	ldr	r0, [pc, #104]	; (8000434 <MX_TIM2_Init+0xf0>)
 80003ca:	f001 ff1f 	bl	800220c <HAL_TIM_PWM_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003d4:	f000 f984 	bl	80006e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e0:	f107 0320 	add.w	r3, r7, #32
 80003e4:	4619      	mov	r1, r3
 80003e6:	4813      	ldr	r0, [pc, #76]	; (8000434 <MX_TIM2_Init+0xf0>)
 80003e8:	f002 fcc4 	bl	8002d74 <HAL_TIMEx_MasterConfigSynchronization>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003f2:	f000 f975 	bl	80006e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f6:	2360      	movs	r3, #96	; 0x60
 80003f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 80003fa:	2305      	movs	r3, #5
 80003fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	4619      	mov	r1, r3
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <MX_TIM2_Init+0xf0>)
 800040e:	f002 f86b 	bl	80024e8 <HAL_TIM_PWM_ConfigChannel>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000418:	f000 f962 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  htim2.Init.Period = wiper_periode -1;
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <MX_TIM2_Init+0xf0>)
 800041e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000422:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000424:	4803      	ldr	r0, [pc, #12]	; (8000434 <MX_TIM2_Init+0xf0>)
 8000426:	f000 fa4b 	bl	80008c0 <HAL_TIM_MspPostInit>

}
 800042a:	bf00      	nop
 800042c:	3738      	adds	r7, #56	; 0x38
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000118 	.word	0x20000118

08000438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b08e      	sub	sp, #56	; 0x38
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044c:	f107 0320 	add.w	r3, r7, #32
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]
 8000466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <MX_TIM3_Init+0xe8>)
 800046a:	4a2e      	ldr	r2, [pc, #184]	; (8000524 <MX_TIM3_Init+0xec>)
 800046c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 800046e:	4b2c      	ldr	r3, [pc, #176]	; (8000520 <MX_TIM3_Init+0xe8>)
 8000470:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000474:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <MX_TIM3_Init+0xe8>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <MX_TIM3_Init+0xe8>)
 800047e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000482:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <MX_TIM3_Init+0xe8>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <MX_TIM3_Init+0xe8>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000490:	4823      	ldr	r0, [pc, #140]	; (8000520 <MX_TIM3_Init+0xe8>)
 8000492:	f001 fe6d 	bl	8002170 <HAL_TIM_Base_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800049c:	f000 f920 	bl	80006e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004aa:	4619      	mov	r1, r3
 80004ac:	481c      	ldr	r0, [pc, #112]	; (8000520 <MX_TIM3_Init+0xe8>)
 80004ae:	f002 f8e1 	bl	8002674 <HAL_TIM_ConfigClockSource>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80004b8:	f000 f912 	bl	80006e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004bc:	4818      	ldr	r0, [pc, #96]	; (8000520 <MX_TIM3_Init+0xe8>)
 80004be:	f001 fea5 	bl	800220c <HAL_TIM_PWM_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80004c8:	f000 f90a 	bl	80006e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004d4:	f107 0320 	add.w	r3, r7, #32
 80004d8:	4619      	mov	r1, r3
 80004da:	4811      	ldr	r0, [pc, #68]	; (8000520 <MX_TIM3_Init+0xe8>)
 80004dc:	f002 fc4a 	bl	8002d74 <HAL_TIMEx_MasterConfigSynchronization>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80004e6:	f000 f8fb 	bl	80006e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ea:	2360      	movs	r3, #96	; 0x60
 80004ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80004ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	220c      	movs	r2, #12
 8000500:	4619      	mov	r1, r3
 8000502:	4807      	ldr	r0, [pc, #28]	; (8000520 <MX_TIM3_Init+0xe8>)
 8000504:	f001 fff0 	bl	80024e8 <HAL_TIM_PWM_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800050e:	f000 f8e7 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000512:	4803      	ldr	r0, [pc, #12]	; (8000520 <MX_TIM3_Init+0xe8>)
 8000514:	f000 f9d4 	bl	80008c0 <HAL_TIM_MspPostInit>

}
 8000518:	bf00      	nop
 800051a:	3738      	adds	r7, #56	; 0x38
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000054 	.word	0x20000054
 8000524:	40000400 	.word	0x40000400

08000528 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void) 
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_DMA_Init+0x68>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MX_DMA_Init+0x68>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_DMA_Init+0x68>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_DMA_Init+0x6c>)
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <MX_DMA_Init+0x70>)
 800054a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_DMA_Init+0x6c>)
 800054e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000552:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_DMA_Init+0x6c>)
 8000556:	2240      	movs	r2, #64	; 0x40
 8000558:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_DMA_Init+0x6c>)
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_DMA_Init+0x6c>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <MX_DMA_Init+0x6c>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_DMA_Init+0x6c>)
 800056e:	2200      	movs	r2, #0
 8000570:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <MX_DMA_Init+0x6c>)
 8000574:	2200      	movs	r2, #0
 8000576:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000578:	4806      	ldr	r0, [pc, #24]	; (8000594 <MX_DMA_Init+0x6c>)
 800057a:	f001 f809 	bl	8001590 <HAL_DMA_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_DMA_Init+0x60>
  {
    Error_Handler( );
 8000584:	f000 f8ac 	bl	80006e0 <Error_Handler>
  }

}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	200000d4 	.word	0x200000d4
 8000598:	40020008 	.word	0x40020008

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b46      	ldr	r3, [pc, #280]	; (80006cc <MX_GPIO_Init+0x130>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a45      	ldr	r2, [pc, #276]	; (80006cc <MX_GPIO_Init+0x130>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <MX_GPIO_Init+0x130>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b40      	ldr	r3, [pc, #256]	; (80006cc <MX_GPIO_Init+0x130>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a3f      	ldr	r2, [pc, #252]	; (80006cc <MX_GPIO_Init+0x130>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <MX_GPIO_Init+0x130>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	4b3a      	ldr	r3, [pc, #232]	; (80006cc <MX_GPIO_Init+0x130>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a39      	ldr	r2, [pc, #228]	; (80006cc <MX_GPIO_Init+0x130>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <MX_GPIO_Init+0x130>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, control_clim_power_Pin|control_wiper_power_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80005fe:	4834      	ldr	r0, [pc, #208]	; (80006d0 <MX_GPIO_Init+0x134>)
 8000600:	f001 f991 	bl	8001926 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : int_2_Pin */
  GPIO_InitStruct.Pin = int_2_Pin;
 8000604:	2340      	movs	r3, #64	; 0x40
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0x138>)
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(int_2_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4830      	ldr	r0, [pc, #192]	; (80006d8 <MX_GPIO_Init+0x13c>)
 8000618:	f001 f814 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pins : control_clim_power_Pin control_wiper_power_Pin */
  GPIO_InitStruct.Pin = control_clim_power_Pin|control_wiper_power_Pin;
 800061c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2302      	movs	r3, #2
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4826      	ldr	r0, [pc, #152]	; (80006d0 <MX_GPIO_Init+0x134>)
 8000636:	f001 f805 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : int_5_Pin */
  GPIO_InitStruct.Pin = int_5_Pin;
 800063a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <MX_GPIO_Init+0x138>)
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2301      	movs	r3, #1
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(int_5_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4822      	ldr	r0, [pc, #136]	; (80006d8 <MX_GPIO_Init+0x13c>)
 8000650:	f000 fff8 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : int_4_Pin */
  GPIO_InitStruct.Pin = int_4_Pin;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_GPIO_Init+0x138>)
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800065e:	2301      	movs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(int_4_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4619      	mov	r1, r3
 8000668:	481c      	ldr	r0, [pc, #112]	; (80006dc <MX_GPIO_Init+0x140>)
 800066a:	f000 ffeb 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : plus_moins_Pin */
  GPIO_InitStruct.Pin = plus_moins_Pin;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_GPIO_Init+0x138>)
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(plus_moins_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	4619      	mov	r1, r3
 8000682:	4816      	ldr	r0, [pc, #88]	; (80006dc <MX_GPIO_Init+0x140>)
 8000684:	f000 ffde 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pins : int_1_Pin int_3_Pin */
  GPIO_InitStruct.Pin = int_1_Pin|int_3_Pin;
 8000688:	f44f 7390 	mov.w	r3, #288	; 0x120
 800068c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_GPIO_Init+0x138>)
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0x134>)
 800069e:	f000 ffd1 	bl	8001644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2017      	movs	r0, #23
 80006a8:	f000 ff3b 	bl	8001522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006ac:	2017      	movs	r0, #23
 80006ae:	f000 ff54 	bl	800155a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2028      	movs	r0, #40	; 0x28
 80006b8:	f000 ff33 	bl	8001522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006bc:	2028      	movs	r0, #40	; 0x28
 80006be:	f000 ff4c 	bl	800155a <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	10210000 	.word	0x10210000
 80006d8:	40010800 	.word	0x40010800
 80006dc:	40011000 	.word	0x40011000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_MspInit+0x5c>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a14      	ldr	r2, [pc, #80]	; (8000748 <HAL_MspInit+0x5c>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x5c>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_MspInit+0x5c>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_MspInit+0x60>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_MspInit+0x60>)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000
 800074c:	40010000 	.word	0x40010000

08000750 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a24      	ldr	r2, [pc, #144]	; (80007fc <HAL_CAN_MspInit+0xac>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d141      	bne.n	80007f4 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <HAL_CAN_MspInit+0xb0>)
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	4a22      	ldr	r2, [pc, #136]	; (8000800 <HAL_CAN_MspInit+0xb0>)
 8000776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077a:	61d3      	str	r3, [r2, #28]
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <HAL_CAN_MspInit+0xb0>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <HAL_CAN_MspInit+0xb0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <HAL_CAN_MspInit+0xb0>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <HAL_CAN_MspInit+0xb0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <HAL_CAN_MspInit+0xb4>)
 80007b6:	f000 ff45 	bl	8001644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <HAL_CAN_MspInit+0xb4>)
 80007d0:	f000 ff38 	bl	8001644 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2015      	movs	r0, #21
 80007da:	f000 fea2 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80007de:	2015      	movs	r0, #21
 80007e0:	f000 febb 	bl	800155a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2016      	movs	r0, #22
 80007ea:	f000 fe9a 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80007ee:	2016      	movs	r0, #22
 80007f0:	f000 feb3 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40006400 	.word	0x40006400
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800

08000808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a27      	ldr	r2, [pc, #156]	; (80008b4 <HAL_TIM_Base_MspInit+0xac>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d114      	bne.n	8000844 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 8000820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000824:	6193      	str	r3, [r2, #24]
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	2019      	movs	r0, #25
 8000838:	f000 fe73 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800083c:	2019      	movs	r0, #25
 800083e:	f000 fe8c 	bl	800155a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000842:	e032      	b.n	80008aa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800084c:	d114      	bne.n	8000878 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	201c      	movs	r0, #28
 800086c:	f000 fe59 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000870:	201c      	movs	r0, #28
 8000872:	f000 fe72 	bl	800155a <HAL_NVIC_EnableIRQ>
}
 8000876:	e018      	b.n	80008aa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_TIM_Base_MspInit+0xb4>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d113      	bne.n	80008aa <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_TIM_Base_MspInit+0xb0>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	201d      	movs	r0, #29
 80008a0:	f000 fe3f 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008a4:	201d      	movs	r0, #29
 80008a6:	f000 fe58 	bl	800155a <HAL_NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40012c00 	.word	0x40012c00
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40000400 	.word	0x40000400

080008c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008de:	d118      	bne.n	8000912 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <HAL_TIM_MspPostInit+0xbc>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a25      	ldr	r2, [pc, #148]	; (800097c <HAL_TIM_MspPostInit+0xbc>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <HAL_TIM_MspPostInit+0xbc>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = pwm_wiper_Pin;
 80008f8:	2301      	movs	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(pwm_wiper_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	481d      	ldr	r0, [pc, #116]	; (8000980 <HAL_TIM_MspPostInit+0xc0>)
 800090c:	f000 fe9a 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000910:	e02f      	b.n	8000972 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <HAL_TIM_MspPostInit+0xc4>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d12a      	bne.n	8000972 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_TIM_MspPostInit+0xbc>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a16      	ldr	r2, [pc, #88]	; (800097c <HAL_TIM_MspPostInit+0xbc>)
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_TIM_MspPostInit+0xbc>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = led_idle_Pin;
 8000934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(led_idle_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <HAL_TIM_MspPostInit+0xc8>)
 800094a:	f000 fe7b 	bl	8001644 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_TIM_MspPostInit+0xcc>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_TIM_MspPostInit+0xcc>)
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	6053      	str	r3, [r2, #4]
}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	; 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	40010800 	.word	0x40010800
 8000984:	40000400 	.word	0x40000400
 8000988:	40011000 	.word	0x40011000
 800098c:	40010000 	.word	0x40010000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <HardFault_Handler+0x4>

080009a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <BusFault_Handler+0x4>

080009ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <UsageFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f98c 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <CAN1_RX1_IRQHandler+0x10>)
 80009ea:	f000 fa9c 	bl	8000f26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000002c 	.word	0x2000002c

080009f8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <CAN1_SCE_IRQHandler+0x10>)
 80009fe:	f000 fa92 	bl	8000f26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000002c 	.word	0x2000002c

08000a0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(int_3_GPIO_Port, int_3_Pin)==0){wiper();}
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <EXTI9_5_IRQHandler+0x38>)
 8000a16:	f000 ff6f 	bl	80018f8 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <EXTI9_5_IRQHandler+0x18>
 8000a20:	f000 f8b2 	bl	8000b88 <wiper>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a24:	2020      	movs	r0, #32
 8000a26:	f000 ff97 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a2a:	2040      	movs	r0, #64	; 0x40
 8000a2c:	f000 ff94 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000a30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a34:	f000 ff90 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000a38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a3c:	f000 ff8c 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <TIM1_UP_IRQHandler+0x10>)
 8000a4e:	f001 fc43 	bl	80022d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000094 	.word	0x20000094

08000a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM2_IRQHandler+0x10>)
 8000a62:	f001 fc39 	bl	80022d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000118 	.word	0x20000118

08000a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM3_IRQHandler+0x10>)
 8000a76:	f001 fc2f 	bl	80022d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000054 	.word	0x20000054

08000a84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000a88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a8c:	f000 ff64 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a94:	f000 ff60 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if(htim == &htim1){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d104      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		//HAL_GPIO_TogglePin(led_idle_GPIO_Port, led_idle_Pin);
		SetWiperPourcentage(10);
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	20000094 	.word	0x20000094
 8000ac4:	20000118 	.word	0x20000118

08000ac8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <SystemInit+0x5c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <SystemInit+0x5c>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <SystemInit+0x5c>)
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	4911      	ldr	r1, [pc, #68]	; (8000b24 <SystemInit+0x5c>)
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <SystemInit+0x60>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <SystemInit+0x5c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <SystemInit+0x5c>)
 8000aea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000af2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <SystemInit+0x5c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SystemInit+0x5c>)
 8000afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <SystemInit+0x5c>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <SystemInit+0x5c>)
 8000b06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b0a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SystemInit+0x5c>)
 8000b0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b12:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SystemInit+0x64>)
 8000b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000
 8000b28:	f8ff0000 	.word	0xf8ff0000
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <powerWiper>:

/* USER CODE END Includes */


 void powerWiper(state Wiper_state)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	if(Wiper_state == ON){HAL_GPIO_WritePin(control_wiper_power_GPIO_Port, control_wiper_power_Pin, 1);}
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d106      	bne.n	8000b4e <powerWiper+0x1e>
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b46:	480e      	ldr	r0, [pc, #56]	; (8000b80 <powerWiper+0x50>)
 8000b48:	f000 feed 	bl	8001926 <HAL_GPIO_WritePin>
	else if ( Wiper_state == OFF){HAL_GPIO_WritePin(control_wiper_power_GPIO_Port, control_wiper_power_Pin, 0);SetWiperPourcentage(0);}
	else {HAL_GPIO_WritePin(control_wiper_power_GPIO_Port, control_wiper_power_Pin, 1);}
}
 8000b4c:	e013      	b.n	8000b76 <powerWiper+0x46>
	else if ( Wiper_state == OFF){HAL_GPIO_WritePin(control_wiper_power_GPIO_Port, control_wiper_power_Pin, 0);SetWiperPourcentage(0);}
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10a      	bne.n	8000b6a <powerWiper+0x3a>
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5a:	4809      	ldr	r0, [pc, #36]	; (8000b80 <powerWiper+0x50>)
 8000b5c:	f000 fee3 	bl	8001926 <HAL_GPIO_WritePin>
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <powerWiper+0x54>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b68:	e005      	b.n	8000b76 <powerWiper+0x46>
	else {HAL_GPIO_WritePin(control_wiper_power_GPIO_Port, control_wiper_power_Pin, 1);}
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <powerWiper+0x50>)
 8000b72:	f000 fed8 	bl	8001926 <HAL_GPIO_WritePin>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40010c00 	.word	0x40010c00
 8000b84:	20000118 	.word	0x20000118

08000b88 <wiper>:

void wiper(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	WIPERSTATE = (WIPERSTATE + 1)%3;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <wiper+0x48>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <wiper+0x4c>)
 8000b94:	fb83 3102 	smull	r3, r1, r3, r2
 8000b98:	17d3      	asrs	r3, r2, #31
 8000b9a:	1ac9      	subs	r1, r1, r3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	440b      	add	r3, r1
 8000ba2:	1ad1      	subs	r1, r2, r3
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <wiper+0x48>)
 8000ba8:	701a      	strb	r2, [r3, #0]
	setWiperState(WIPERSTATE);
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <wiper+0x48>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f812 	bl	8000bd8 <setWiperState>
	if (WIPERSTATE == OFF){powerWiper(OFF);}
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <wiper+0x48>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d103      	bne.n	8000bc4 <wiper+0x3c>
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff ffb7 	bl	8000b30 <powerWiper>
	else{powerWiper(ON);}
}
 8000bc2:	e002      	b.n	8000bca <wiper+0x42>
	else{powerWiper(ON);}
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff ffb3 	bl	8000b30 <powerWiper>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000028 	.word	0x20000028
 8000bd4:	55555556 	.word	0x55555556

08000bd8 <setWiperState>:

void setWiperState(state STATE) //Control the period of TIM_1 to change the speed incrementation of DC of TIM2
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
	switch(STATE)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d007      	beq.n	8000bf8 <setWiperState+0x20>
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d00a      	beq.n	8000c02 <setWiperState+0x2a>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10e      	bne.n	8000c0e <setWiperState+0x36>
	{
		case OFF:
			powerWiper(OFF);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff9d 	bl	8000b30 <powerWiper>
			break;
 8000bf6:	e00d      	b.n	8000c14 <setWiperState+0x3c>
//set tim 1 period so it update tim2 pwm DC :
		case Speed1:
			SetWiperPourcentage(wiper_starting_DutyCycle_pourcentage);
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <setWiperState+0x44>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	22c8      	movs	r2, #200	; 0xc8
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34
			//htim1.Init.Period = 1500-1;
			break;
 8000c00:	e008      	b.n	8000c14 <setWiperState+0x3c>
		case Speed2:
			SetWiperPourcentage(wiper_ending_DutyCycle_pourcentage);
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <setWiperState+0x44>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000c0c:	e002      	b.n	8000c14 <setWiperState+0x3c>
		default:
			powerWiper(OFF);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff ff8e 	bl	8000b30 <powerWiper>
	}
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000118 	.word	0x20000118

08000c20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c20:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c22:	e003      	b.n	8000c2c <LoopCopyDataInit>

08000c24 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c26:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c28:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c2a:	3104      	adds	r1, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c2c:	480a      	ldr	r0, [pc, #40]	; (8000c58 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c30:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c32:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c34:	d3f6      	bcc.n	8000c24 <CopyDataInit>
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c38:	e002      	b.n	8000c40 <LoopFillZerobss>

08000c3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c3c:	f842 3b04 	str.w	r3, [r2], #4

08000c40 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c42:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c44:	d3f9      	bcc.n	8000c3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c46:	f7ff ff3f 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 f8e9 	bl	8002e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff fa7d 	bl	800014c <main>
  bx lr
 8000c52:	4770      	bx	lr
  ldr r3, =_sidata
 8000c54:	08002ebc 	.word	0x08002ebc
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c64:	2000015c 	.word	0x2000015c

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x28>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x28>)
 8000c76:	f043 0310 	orr.w	r3, r3, #16
 8000c7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 fc45 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fd30 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fc5d 	bl	8001576 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 fc25 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000004 	.word	0x20000004

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <HAL_IncTick+0x20>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000158 	.word	0x20000158

08000d1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <HAL_GetTick+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000158 	.word	0x20000158

08000d30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e0ed      	b.n	8000f1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fcfe 	bl	8000750 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0202 	bic.w	r2, r2, #2
 8000d62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d64:	f7ff ffda 	bl	8000d1c <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d6a:	e012      	b.n	8000d92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d6c:	f7ff ffd6 	bl	8000d1c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b0a      	cmp	r3, #10
 8000d78:	d90b      	bls.n	8000d92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2205      	movs	r2, #5
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e0c5      	b.n	8000f1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e5      	bne.n	8000d6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0201 	orr.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000db0:	f7ff ffb4 	bl	8000d1c <HAL_GetTick>
 8000db4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db6:	e012      	b.n	8000dde <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db8:	f7ff ffb0 	bl	8000d1c <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b0a      	cmp	r3, #10
 8000dc4:	d90b      	bls.n	8000dde <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2205      	movs	r2, #5
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e09f      	b.n	8000f1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0e5      	beq.n	8000db8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7e1b      	ldrb	r3, [r3, #24]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d108      	bne.n	8000e06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	e007      	b.n	8000e16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7e5b      	ldrb	r3, [r3, #25]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d108      	bne.n	8000e30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e007      	b.n	8000e40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7e9b      	ldrb	r3, [r3, #26]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d108      	bne.n	8000e5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0220 	orr.w	r2, r2, #32
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	e007      	b.n	8000e6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0220 	bic.w	r2, r2, #32
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7edb      	ldrb	r3, [r3, #27]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d108      	bne.n	8000e84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0210 	bic.w	r2, r2, #16
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0210 	orr.w	r2, r2, #16
 8000e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7f1b      	ldrb	r3, [r3, #28]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d108      	bne.n	8000eae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0208 	orr.w	r2, r2, #8
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e007      	b.n	8000ebe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0208 	bic.w	r2, r2, #8
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7f5b      	ldrb	r3, [r3, #29]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d108      	bne.n	8000ed8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0204 	orr.w	r2, r2, #4
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e007      	b.n	8000ee8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0204 	bic.w	r2, r2, #4
 8000ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	ea42 0103 	orr.w	r1, r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b08a      	sub	sp, #40	; 0x28
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d07c      	beq.n	8001066 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d023      	beq.n	8000fbe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f97d 	bl	8001288 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f8e:	e016      	b.n	8000fbe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d004      	beq.n	8000fa4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	e00c      	b.n	8000fbe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb6:	e002      	b.n	8000fbe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f980 	bl	80012be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d024      	beq.n	8001012 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f95c 	bl	800129a <HAL_CAN_TxMailbox1CompleteCallback>
 8000fe2:	e016      	b.n	8001012 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e00c      	b.n	8001012 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	e002      	b.n	8001012 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f95f 	bl	80012d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d024      	beq.n	8001066 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001024:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f93b 	bl	80012ac <HAL_CAN_TxMailbox2CompleteCallback>
 8001036:	e016      	b.n	8001066 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d004      	beq.n	800104c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
 800104a:	e00c      	b.n	8001066 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
 800105e:	e002      	b.n	8001066 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f93e 	bl	80012e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00c      	beq.n	800108a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001080:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2210      	movs	r2, #16
 8001088:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00b      	beq.n	80010ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2208      	movs	r2, #8
 80010a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f92d 	bl	8001306 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d009      	beq.n	80010ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f915 	bl	80012f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00c      	beq.n	80010ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2210      	movs	r2, #16
 80010ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010ee:	6a3b      	ldr	r3, [r7, #32]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00b      	beq.n	8001110 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2208      	movs	r2, #8
 8001108:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f90d 	bl	800132a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	2b00      	cmp	r3, #0
 8001118:	d009      	beq.n	800112e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f8f5 	bl	8001318 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00b      	beq.n	8001150 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2210      	movs	r2, #16
 8001148:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f8f6 	bl	800133c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2208      	movs	r2, #8
 800116a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f8ee 	bl	800134e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d075      	beq.n	8001268 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	2b00      	cmp	r3, #0
 8001184:	d06c      	beq.n	8001260 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d008      	beq.n	80011da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d03d      	beq.n	8001260 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d038      	beq.n	8001260 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011f4:	2b30      	cmp	r3, #48	; 0x30
 80011f6:	d017      	beq.n	8001228 <HAL_CAN_IRQHandler+0x302>
 80011f8:	2b30      	cmp	r3, #48	; 0x30
 80011fa:	d804      	bhi.n	8001206 <HAL_CAN_IRQHandler+0x2e0>
 80011fc:	2b10      	cmp	r3, #16
 80011fe:	d009      	beq.n	8001214 <HAL_CAN_IRQHandler+0x2ee>
 8001200:	2b20      	cmp	r3, #32
 8001202:	d00c      	beq.n	800121e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001204:	e024      	b.n	8001250 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001206:	2b50      	cmp	r3, #80	; 0x50
 8001208:	d018      	beq.n	800123c <HAL_CAN_IRQHandler+0x316>
 800120a:	2b60      	cmp	r3, #96	; 0x60
 800120c:	d01b      	beq.n	8001246 <HAL_CAN_IRQHandler+0x320>
 800120e:	2b40      	cmp	r3, #64	; 0x40
 8001210:	d00f      	beq.n	8001232 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001212:	e01d      	b.n	8001250 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800121c:	e018      	b.n	8001250 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001226:	e013      	b.n	8001250 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001230:	e00e      	b.n	8001250 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800123a:	e009      	b.n	8001250 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001244:	e004      	b.n	8001250 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800124e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800125e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2204      	movs	r2, #4
 8001266:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	2b00      	cmp	r3, #0
 800126c:	d008      	beq.n	8001280 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f870 	bl	8001360 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
	...

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4906      	ldr	r1, [pc, #24]	; (800140c <__NVIC_EnableIRQ+0x34>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff90 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff2d 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff42 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff90 	bl	8001464 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5f 	bl	8001410 <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff35 	bl	80013d8 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e043      	b.n	800162e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_DMA_Init+0xa8>)
 80015ae:	4413      	add	r3, r2
 80015b0:	4a22      	ldr	r2, [pc, #136]	; (800163c <HAL_DMA_Init+0xac>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	009a      	lsls	r2, r3, #2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <HAL_DMA_Init+0xb0>)
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	bffdfff8 	.word	0xbffdfff8
 800163c:	cccccccd 	.word	0xcccccccd
 8001640:	40020000 	.word	0x40020000

08001644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001644:	b480      	push	{r7}
 8001646:	b08b      	sub	sp, #44	; 0x2c
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	e127      	b.n	80018a8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001658:	2201      	movs	r2, #1
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	429a      	cmp	r2, r3
 8001672:	f040 8116 	bne.w	80018a2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b12      	cmp	r3, #18
 800167c:	d034      	beq.n	80016e8 <HAL_GPIO_Init+0xa4>
 800167e:	2b12      	cmp	r3, #18
 8001680:	d80d      	bhi.n	800169e <HAL_GPIO_Init+0x5a>
 8001682:	2b02      	cmp	r3, #2
 8001684:	d02b      	beq.n	80016de <HAL_GPIO_Init+0x9a>
 8001686:	2b02      	cmp	r3, #2
 8001688:	d804      	bhi.n	8001694 <HAL_GPIO_Init+0x50>
 800168a:	2b00      	cmp	r3, #0
 800168c:	d031      	beq.n	80016f2 <HAL_GPIO_Init+0xae>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d01c      	beq.n	80016cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001692:	e048      	b.n	8001726 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001694:	2b03      	cmp	r3, #3
 8001696:	d043      	beq.n	8001720 <HAL_GPIO_Init+0xdc>
 8001698:	2b11      	cmp	r3, #17
 800169a:	d01b      	beq.n	80016d4 <HAL_GPIO_Init+0x90>
          break;
 800169c:	e043      	b.n	8001726 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800169e:	4a89      	ldr	r2, [pc, #548]	; (80018c4 <HAL_GPIO_Init+0x280>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d026      	beq.n	80016f2 <HAL_GPIO_Init+0xae>
 80016a4:	4a87      	ldr	r2, [pc, #540]	; (80018c4 <HAL_GPIO_Init+0x280>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d806      	bhi.n	80016b8 <HAL_GPIO_Init+0x74>
 80016aa:	4a87      	ldr	r2, [pc, #540]	; (80018c8 <HAL_GPIO_Init+0x284>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d020      	beq.n	80016f2 <HAL_GPIO_Init+0xae>
 80016b0:	4a86      	ldr	r2, [pc, #536]	; (80018cc <HAL_GPIO_Init+0x288>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01d      	beq.n	80016f2 <HAL_GPIO_Init+0xae>
          break;
 80016b6:	e036      	b.n	8001726 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016b8:	4a85      	ldr	r2, [pc, #532]	; (80018d0 <HAL_GPIO_Init+0x28c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d019      	beq.n	80016f2 <HAL_GPIO_Init+0xae>
 80016be:	4a85      	ldr	r2, [pc, #532]	; (80018d4 <HAL_GPIO_Init+0x290>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d016      	beq.n	80016f2 <HAL_GPIO_Init+0xae>
 80016c4:	4a84      	ldr	r2, [pc, #528]	; (80018d8 <HAL_GPIO_Init+0x294>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0xae>
          break;
 80016ca:	e02c      	b.n	8001726 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e028      	b.n	8001726 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e023      	b.n	8001726 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	3308      	adds	r3, #8
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e01e      	b.n	8001726 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	330c      	adds	r3, #12
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e019      	b.n	8001726 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fa:	2304      	movs	r3, #4
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e012      	b.n	8001726 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	611a      	str	r2, [r3, #16]
          break;
 8001712:	e008      	b.n	8001726 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	615a      	str	r2, [r3, #20]
          break;
 800171e:	e002      	b.n	8001726 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2bff      	cmp	r3, #255	; 0xff
 800172a:	d801      	bhi.n	8001730 <HAL_GPIO_Init+0xec>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	e001      	b.n	8001734 <HAL_GPIO_Init+0xf0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3304      	adds	r3, #4
 8001734:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2bff      	cmp	r3, #255	; 0xff
 800173a:	d802      	bhi.n	8001742 <HAL_GPIO_Init+0xfe>
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x104>
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	3b08      	subs	r3, #8
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	210f      	movs	r1, #15
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	401a      	ands	r2, r3
 800175a:	6a39      	ldr	r1, [r7, #32]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	431a      	orrs	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8096 	beq.w	80018a2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_GPIO_Init+0x298>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_GPIO_Init+0x298>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6193      	str	r3, [r2, #24]
 8001782:	4b56      	ldr	r3, [pc, #344]	; (80018dc <HAL_GPIO_Init+0x298>)
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800178e:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4013      	ands	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_GPIO_Init+0x2a0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x19e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x2a4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x19a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a49      	ldr	r2, [pc, #292]	; (80018ec <HAL_GPIO_Init+0x2a8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x196>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a48      	ldr	r2, [pc, #288]	; (80018f0 <HAL_GPIO_Init+0x2ac>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x192>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x1a0>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x1a0>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x1a0>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x1a0>
 80017e2:	2300      	movs	r3, #0
 80017e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017f4:	493a      	ldr	r1, [pc, #232]	; (80018e0 <HAL_GPIO_Init+0x29c>)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800180e:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4938      	ldr	r1, [pc, #224]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
 800181a:	e006      	b.n	800182a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800181c:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	43db      	mvns	r3, r3
 8001824:	4933      	ldr	r1, [pc, #204]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001826:	4013      	ands	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	492e      	ldr	r1, [pc, #184]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	43db      	mvns	r3, r3
 800184c:	4929      	ldr	r1, [pc, #164]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 800184e:	4013      	ands	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	4924      	ldr	r1, [pc, #144]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
 800186a:	e006      	b.n	800187a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	43db      	mvns	r3, r3
 8001874:	491f      	ldr	r1, [pc, #124]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001876:	4013      	ands	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	491a      	ldr	r1, [pc, #104]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	60cb      	str	r3, [r1, #12]
 8001892:	e006      	b.n	80018a2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	43db      	mvns	r3, r3
 800189c:	4915      	ldr	r1, [pc, #84]	; (80018f4 <HAL_GPIO_Init+0x2b0>)
 800189e:	4013      	ands	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	3301      	adds	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f47f aed0 	bne.w	8001658 <HAL_GPIO_Init+0x14>
  }
}
 80018b8:	bf00      	nop
 80018ba:	372c      	adds	r7, #44	; 0x2c
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	10210000 	.word	0x10210000
 80018c8:	10110000 	.word	0x10110000
 80018cc:	10120000 	.word	0x10120000
 80018d0:	10310000 	.word	0x10310000
 80018d4:	10320000 	.word	0x10320000
 80018d8:	10220000 	.word	0x10220000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000
 80018e4:	40010800 	.word	0x40010800
 80018e8:	40010c00 	.word	0x40010c00
 80018ec:	40011000 	.word	0x40011000
 80018f0:	40011400 	.word	0x40011400
 80018f4:	40010400 	.word	0x40010400

080018f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e001      	b.n	800191a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	807b      	strh	r3, [r7, #2]
 8001932:	4613      	mov	r3, r2
 8001934:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001936:	787b      	ldrb	r3, [r7, #1]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193c:	887a      	ldrh	r2, [r7, #2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001942:	e003      	b.n	800194c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	041a      	lsls	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	611a      	str	r2, [r3, #16]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
	...

08001958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f806 	bl	8001988 <HAL_GPIO_EXTI_Callback>
  }
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e26c      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8087 	beq.w	8001aca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d00c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c8:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d112      	bne.n	80019fa <HAL_RCC_OscConfig+0x5e>
 80019d4:	4b8c      	ldr	r3, [pc, #560]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d10b      	bne.n	80019fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	4b89      	ldr	r3, [pc, #548]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x12c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d168      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e246      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x76>
 8001a04:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a7f      	ldr	r2, [pc, #508]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x98>
 8001a1a:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7a      	ldr	r2, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a77      	ldr	r2, [pc, #476]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0xbc>
 8001a3e:	4b72      	ldr	r3, [pc, #456]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a71      	ldr	r2, [pc, #452]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a58:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6a      	ldr	r2, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a67      	ldr	r2, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff f950 	bl	8000d1c <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff f94c 	bl	8000d1c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1fa      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe4>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f93c 	bl	8000d1c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f938 	bl	8000d1c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1e6      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x10c>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ae2:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x18c>
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1ba      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4939      	ldr	r1, [pc, #228]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff f8f1 	bl	8000d1c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff f8ed 	bl	8000d1c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e19b      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4927      	ldr	r1, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f8d0 	bl	8000d1c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff f8cc 	bl	8000d1c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e17a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03a      	beq.n	8001c20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d019      	beq.n	8001be6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff f8b0 	bl	8000d1c <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f8ac 	bl	8000d1c <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e15a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f000 faa8 	bl	8002134 <RCC_Delay>
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff f896 	bl	8000d1c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff f892 	bl	8000d1c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d908      	bls.n	8001c14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e140      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	42420000 	.word	0x42420000
 8001c10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	4b9e      	ldr	r3, [pc, #632]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e9      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80a6 	beq.w	8001d7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b97      	ldr	r3, [pc, #604]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a93      	ldr	r2, [pc, #588]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a8a      	ldr	r2, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f853 	bl	8000d1c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff f84f 	bl	8000d1c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0fd      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x312>
 8001ca0:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a7a      	ldr	r2, [pc, #488]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x334>
 8001cb6:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a72      	ldr	r2, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	e01c      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x356>
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a6c      	ldr	r2, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff f803 	bl	8000d1c <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7fe ffff 	bl	8000d1c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0ab      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ee      	beq.n	8001d1a <HAL_RCC_OscConfig+0x37e>
 8001d3c:	e014      	b.n	8001d68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7fe ffed 	bl	8000d1c <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7fe ffe9 	bl	8000d1c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e095      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8081 	beq.w	8001e86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d061      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d146      	bne.n	8001e26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ffbd 	bl	8000d1c <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe ffb9 	bl	8000d1c <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e067      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	492d      	ldr	r1, [pc, #180]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a19      	ldr	r1, [r3, #32]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	430b      	orrs	r3, r1
 8001df2:	4927      	ldr	r1, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ff8d 	bl	8000d1c <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe ff89 	bl	8000d1c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e037      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x46a>
 8001e24:	e02f      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ff76 	bl	8000d1c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe ff72 	bl	8000d1c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e020      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x498>
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e013      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	42420060 	.word	0x42420060

08001e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0d0      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4965      	ldr	r1, [pc, #404]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494d      	ldr	r1, [pc, #308]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d040      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e073      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06b      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4936      	ldr	r1, [pc, #216]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fec6 	bl	8000d1c <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7fe fec2 	bl	8000d1c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e053      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d210      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0207 	bic.w	r2, r3, #7
 8001fd2:	4922      	ldr	r1, [pc, #136]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800202a:	f000 f821 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800202e:	4601      	mov	r1, r0
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	5cd3      	ldrb	r3, [r2, r3]
 800203e:	fa21 f303 	lsr.w	r3, r1, r3
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1cc>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1d0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fe24 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40022000 	.word	0x40022000
 8002060:	40021000 	.word	0x40021000
 8002064:	08002ea4 	.word	0x08002ea4
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b490      	push	{r4, r7}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002078:	1d3c      	adds	r4, r7, #4
 800207a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x40>
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x46>
 80020ae:	e02d      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020b2:	623b      	str	r3, [r7, #32]
      break;
 80020b4:	e02d      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020c2:	4413      	add	r3, r2
 80020c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c5b      	lsrs	r3, r3, #17
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020e2:	4413      	add	r3, r2
 80020e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	4a0f      	ldr	r2, [pc, #60]	; (800212c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ee:	fb02 f203 	mul.w	r2, r2, r3
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	e004      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	623b      	str	r3, [r7, #32]
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_RCC_GetSysClockFreq+0xbc>)
 800210e:	623b      	str	r3, [r7, #32]
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	6a3b      	ldr	r3, [r7, #32]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bc90      	pop	{r4, r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	08002e90 	.word	0x08002e90
 8002124:	08002ea0 	.word	0x08002ea0
 8002128:	40021000 	.word	0x40021000
 800212c:	007a1200 	.word	0x007a1200
 8002130:	003d0900 	.word	0x003d0900

08002134 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <RCC_Delay+0x34>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <RCC_Delay+0x38>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0a5b      	lsrs	r3, r3, #9
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002150:	bf00      	nop
  }
  while (Delay --);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	60fa      	str	r2, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f9      	bne.n	8002150 <RCC_Delay+0x1c>
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000000 	.word	0x20000000
 800216c:	10624dd3 	.word	0x10624dd3

08002170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e01d      	b.n	80021be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fb36 	bl	8000808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3304      	adds	r3, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f000 fb3c 	bl	800282c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	d007      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e01d      	b.n	800225a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f815 	bl	8002262 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 faee 	bl	800282c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	6839      	ldr	r1, [r7, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fd50 	bl	8002d2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_TIM_PWM_Start+0x60>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d007      	beq.n	80022c8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0201 	orr.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40012c00 	.word	0x40012c00

080022d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0202 	mvn.w	r2, #2
 8002304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa6a 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fa5d 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fa6c 	bl	8002806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b04      	cmp	r3, #4
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0204 	mvn.w	r2, #4
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa40 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa33 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fa42 	bl	8002806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b08      	cmp	r3, #8
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0208 	mvn.w	r2, #8
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2204      	movs	r2, #4
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa16 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa09 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fa18 	bl	8002806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0210 	mvn.w	r2, #16
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2208      	movs	r2, #8
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f9ec 	bl	80027f4 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f9df 	bl	80027e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f9ee 	bl	8002806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d10e      	bne.n	800245c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0201 	mvn.w	r2, #1
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fb20 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b80      	cmp	r3, #128	; 0x80
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fcc3 	bl	8002e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f9b2 	bl	8002818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d10e      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d107      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0220 	mvn.w	r2, #32
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fc8e 	bl	8002dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024fe:	2302      	movs	r3, #2
 8002500:	e0b4      	b.n	800266c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	f200 809f 	bhi.w	8002658 <HAL_TIM_PWM_ConfigChannel+0x170>
 800251a:	a201      	add	r2, pc, #4	; (adr r2, 8002520 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002520:	08002555 	.word	0x08002555
 8002524:	08002659 	.word	0x08002659
 8002528:	08002659 	.word	0x08002659
 800252c:	08002659 	.word	0x08002659
 8002530:	08002595 	.word	0x08002595
 8002534:	08002659 	.word	0x08002659
 8002538:	08002659 	.word	0x08002659
 800253c:	08002659 	.word	0x08002659
 8002540:	080025d7 	.word	0x080025d7
 8002544:	08002659 	.word	0x08002659
 8002548:	08002659 	.word	0x08002659
 800254c:	08002659 	.word	0x08002659
 8002550:	08002617 	.word	0x08002617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f9c8 	bl	80028f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0208 	orr.w	r2, r2, #8
 800256e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6999      	ldr	r1, [r3, #24]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	619a      	str	r2, [r3, #24]
      break;
 8002592:	e062      	b.n	800265a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fa0e 	bl	80029bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6999      	ldr	r1, [r3, #24]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	021a      	lsls	r2, r3, #8
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	619a      	str	r2, [r3, #24]
      break;
 80025d4:	e041      	b.n	800265a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fa57 	bl	8002a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0208 	orr.w	r2, r2, #8
 80025f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0204 	bic.w	r2, r2, #4
 8002600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69d9      	ldr	r1, [r3, #28]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	61da      	str	r2, [r3, #28]
      break;
 8002614:	e021      	b.n	800265a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 faa1 	bl	8002b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69d9      	ldr	r1, [r3, #28]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	021a      	lsls	r2, r3, #8
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	61da      	str	r2, [r3, #28]
      break;
 8002656:	e000      	b.n	800265a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002658:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_TIM_ConfigClockSource+0x18>
 8002688:	2302      	movs	r3, #2
 800268a:	e0a6      	b.n	80027da <HAL_TIM_ConfigClockSource+0x166>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d067      	beq.n	8002794 <HAL_TIM_ConfigClockSource+0x120>
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d80b      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x6c>
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d073      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x140>
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d802      	bhi.n	80026d6 <HAL_TIM_ConfigClockSource+0x62>
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d06f      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80026d4:	e078      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	d06c      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x140>
 80026da:	2b30      	cmp	r3, #48	; 0x30
 80026dc:	d06a      	beq.n	80027b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026de:	e073      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026e0:	2b70      	cmp	r3, #112	; 0x70
 80026e2:	d00d      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0x8c>
 80026e4:	2b70      	cmp	r3, #112	; 0x70
 80026e6:	d804      	bhi.n	80026f2 <HAL_TIM_ConfigClockSource+0x7e>
 80026e8:	2b50      	cmp	r3, #80	; 0x50
 80026ea:	d033      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0xe0>
 80026ec:	2b60      	cmp	r3, #96	; 0x60
 80026ee:	d041      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026f0:	e06a      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f6:	d066      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x152>
 80026f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fc:	d017      	beq.n	800272e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026fe:	e063      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f000 faed 	bl	8002cee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002722:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	609a      	str	r2, [r3, #8]
      break;
 800272c:	e04c      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f000 fad6 	bl	8002cee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002750:	609a      	str	r2, [r3, #8]
      break;
 8002752:	e039      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	461a      	mov	r2, r3
 8002762:	f000 fa4d 	bl	8002c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2150      	movs	r1, #80	; 0x50
 800276c:	4618      	mov	r0, r3
 800276e:	f000 faa4 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 8002772:	e029      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	461a      	mov	r2, r3
 8002782:	f000 fa6b 	bl	8002c5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2160      	movs	r1, #96	; 0x60
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fa94 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 8002792:	e019      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	461a      	mov	r2, r3
 80027a2:	f000 fa2d 	bl	8002c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fa84 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 80027b2:	e009      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 fa7b 	bl	8002cba <TIM_ITRx_SetConfig>
      break;
 80027c4:	e000      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80027c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
	...

0800282c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <TIM_Base_SetConfig+0xb8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00b      	beq.n	800285c <TIM_Base_SetConfig+0x30>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d007      	beq.n	800285c <TIM_Base_SetConfig+0x30>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <TIM_Base_SetConfig+0xbc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_Base_SetConfig+0x30>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a25      	ldr	r2, [pc, #148]	; (80028ec <TIM_Base_SetConfig+0xc0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d108      	bne.n	800286e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <TIM_Base_SetConfig+0xb8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00b      	beq.n	800288e <TIM_Base_SetConfig+0x62>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d007      	beq.n	800288e <TIM_Base_SetConfig+0x62>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <TIM_Base_SetConfig+0xbc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d003      	beq.n	800288e <TIM_Base_SetConfig+0x62>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a18      	ldr	r2, [pc, #96]	; (80028ec <TIM_Base_SetConfig+0xc0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d108      	bne.n	80028a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <TIM_Base_SetConfig+0xb8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d103      	bne.n	80028d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	615a      	str	r2, [r3, #20]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800

080028f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	f023 0201 	bic.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0303 	bic.w	r3, r3, #3
 8002926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f023 0302 	bic.w	r3, r3, #2
 8002938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <TIM_OC1_SetConfig+0xc8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d10c      	bne.n	8002966 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f023 0308 	bic.w	r3, r3, #8
 8002952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <TIM_OC1_SetConfig+0xc8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d111      	bne.n	8002992 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800297c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	621a      	str	r2, [r3, #32]
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00

080029bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0210 	bic.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0320 	bic.w	r3, r3, #32
 8002a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <TIM_OC2_SetConfig+0xd0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10d      	bne.n	8002a38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <TIM_OC2_SetConfig+0xd0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d113      	bne.n	8002a68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00

08002a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0303 	bic.w	r3, r3, #3
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <TIM_OC3_SetConfig+0xd0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10d      	bne.n	8002b0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <TIM_OC3_SetConfig+0xd0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d113      	bne.n	8002b3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
}
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40012c00 	.word	0x40012c00

08002b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	031b      	lsls	r3, r3, #12
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <TIM_OC4_SetConfig+0x98>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d109      	bne.n	8002bd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	621a      	str	r2, [r3, #32]
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00

08002c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f023 0201 	bic.w	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 030a 	bic.w	r3, r3, #10
 8002c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f023 0210 	bic.w	r2, r3, #16
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	031b      	lsls	r3, r3, #12
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	621a      	str	r2, [r3, #32]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f043 0307 	orr.w	r3, r3, #7
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	021a      	lsls	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	609a      	str	r2, [r3, #8]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2201      	movs	r2, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e032      	b.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <__libc_init_array>:
 8002e20:	b570      	push	{r4, r5, r6, lr}
 8002e22:	2500      	movs	r5, #0
 8002e24:	4e0c      	ldr	r6, [pc, #48]	; (8002e58 <__libc_init_array+0x38>)
 8002e26:	4c0d      	ldr	r4, [pc, #52]	; (8002e5c <__libc_init_array+0x3c>)
 8002e28:	1ba4      	subs	r4, r4, r6
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	42a5      	cmp	r5, r4
 8002e2e:	d109      	bne.n	8002e44 <__libc_init_array+0x24>
 8002e30:	f000 f822 	bl	8002e78 <_init>
 8002e34:	2500      	movs	r5, #0
 8002e36:	4e0a      	ldr	r6, [pc, #40]	; (8002e60 <__libc_init_array+0x40>)
 8002e38:	4c0a      	ldr	r4, [pc, #40]	; (8002e64 <__libc_init_array+0x44>)
 8002e3a:	1ba4      	subs	r4, r4, r6
 8002e3c:	10a4      	asrs	r4, r4, #2
 8002e3e:	42a5      	cmp	r5, r4
 8002e40:	d105      	bne.n	8002e4e <__libc_init_array+0x2e>
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e48:	4798      	blx	r3
 8002e4a:	3501      	adds	r5, #1
 8002e4c:	e7ee      	b.n	8002e2c <__libc_init_array+0xc>
 8002e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e52:	4798      	blx	r3
 8002e54:	3501      	adds	r5, #1
 8002e56:	e7f2      	b.n	8002e3e <__libc_init_array+0x1e>
 8002e58:	08002eb4 	.word	0x08002eb4
 8002e5c:	08002eb4 	.word	0x08002eb4
 8002e60:	08002eb4 	.word	0x08002eb4
 8002e64:	08002eb8 	.word	0x08002eb8

08002e68 <memset>:
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4402      	add	r2, r0
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d100      	bne.n	8002e72 <memset+0xa>
 8002e70:	4770      	bx	lr
 8002e72:	f803 1b01 	strb.w	r1, [r3], #1
 8002e76:	e7f9      	b.n	8002e6c <memset+0x4>

08002e78 <_init>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	bf00      	nop
 8002e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7e:	bc08      	pop	{r3}
 8002e80:	469e      	mov	lr, r3
 8002e82:	4770      	bx	lr

08002e84 <_fini>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr
